// Calculate ancestry proportion using fixed neutral markers.
function (float)ancestry_prop(lifso<Subpopulation> pop, lifso<MutationType> type) {
    if (chrom == "A")
        n = 2;
    else if (chrom == "X")
        n = 1.5;
    else
        n = 0.5;

    return(sum(pop.individuals.countOfMutationsOfType(type)) / (n * pop.individualCount) / length(marker_pos));
}

// Set a default value of a command-line argument.
function (void)set(s arg, lifs default) {
    if (!exists(arg)) defineConstant(arg, default);
}

// Check if a required command-line argument was specified.
function (void)check_arg(s arg) {
    if (!exists(arg)) stop("Required argument '" + arg + "' not specified!\n");
}

initialize() {
    set("ancestral_Ne", 10000);
    set("human_Ne", 10000);
    set("neand_Ne", 1000);
    set("mut_rate", 0);

    set("dump_at", 0);
    set("sampling_length", 400);

    check_arg("chrom");
    check_arg("chrom_length");
    check_arg("gene_total");
    check_arg("gene_count");
    check_arg("admix_time");
    check_arg("neand_modern");
    check_arg("modern_neand");
    check_arg("output");

    defineConstant("output_traj", output + "_traj.tsv");
    defineConstant("output_pop", output + "_pop.txt");

    marker_count = asInteger(chrom_length / 10000);
    if (chrom == "A") {
        defineConstant("recomb_rate", 1e-8);
    } else if (chrom == "X") {
        defineConstant("recomb_rate", 2/3 * 1e-8);
    } else {
        marker_count = 1;
        defineConstant("recomb_rate", 0.0);
    }

    defineConstant("marker_pos", asInteger(seq(0, chrom_length - 1, length = marker_count)));

    initializeMutationRate(mut_rate);
    initializeRecombinationRate(recomb_rate);

    // neutral ancestry marker
    initializeMutationType("m0", 0.5, "f", 0.0);

    // deleterious mutation type
    initializeMutationType("m1", 0.5, "g", -0.043, 0.23);

    // genomic element type of genic regions
    initializeGenomicElementType("g1", m1, 1.0);

    initializeSex(chrom);

    // uniform chromosome with uniformly distributed genic regions
    if (gene_count == 1) {
        starts = 0;
        ends = chrom_length - 1;
    } else {
        gene_length = gene_total / gene_count;
        step = (chrom_length - gene_total) / (gene_count - 1);
        starts = asInteger(seq(0, chrom_length, by = step + gene_length));
        ends = starts + gene_length - 1;
    }
    for (i in 1 : gene_count)
        initializeGenomicElement(g1, asInteger(starts[i - 1]), asInteger(ends[i - 1]));
}

// create a population of human-Neanderthal ancestors
1 {
    sim.addSubpop("p1", ancestral_Ne);

    defineConstant("burnin", 7 * ancestral_Ne);
    defineConstant("human_split", asInteger(600000 / 25));
    defineConstant("nonafr_split", asInteger(70000 / 25));
    defineConstant("introgression", asInteger(admix_time / 25));
    defineConstant("bottleneck", asInteger(1000 / 25)); // duration of the bottleneck

    start = burnin + human_split - introgression;
    defineConstant("sampling_gens", start + seq(0, sampling_length));

    defineConstant("dump_gen", asInteger(dump_at / 25));

    sim.rescheduleScriptBlock(s1, generations = burnin);
    sim.rescheduleScriptBlock(s2, generations = burnin + human_split - nonafr_split);
    sim.rescheduleScriptBlock(s3, generations = burnin + human_split - nonafr_split + bottleneck);
    sim.rescheduleScriptBlock(s5, generations = burnin + human_split - introgression);
    sim.rescheduleScriptBlock(s6, generations = burnin + human_split - introgression + 1);
    sim.rescheduleScriptBlock(s7, generations = sampling_gens);
    if (dump_gen > 0)
        sim.rescheduleScriptBlock(s4, generations = burnin + human_split - dump_gen);
    else
        sim.deregisterScriptBlock(s4);
}

// end of the burn-in period - split of Neanderthals from other humans
s1 2 late() {
    cat("Generation: " + sim.generation);
    cat(" (" + 25 * (burnin + human_split - sim.generation) + " kya)\n");
    cat("- end of burnin phase\n");
    cat("- split of Neanderthals from modern humans\n");

    sim.addSubpop("p2", neand_Ne);

    cat("- placing neutral markers on the Neanderthal lineage\n");
    p2.genomes[!p2.genomes.isNullGenome].addNewDrawnMutation(m0, marker_pos);
}

// split of non-Africans from Africans
s2 2 {
    cat("\nGeneration: " + sim.generation);
    cat(" (" + 25 * (burnin + human_split - sim.generation) + " kya)\n");
    cat("- non-African bottleneck\n");

    p1.setSubpopulationSize(2000);
}

s3 2 { cat("\nGeneration: " + sim.generation);
    cat(" (" + 25 * (burnin + human_split - sim.generation) + " kya)\n");
    cat("- end of the non-African bottleneck\n");

    p1.setSubpopulationSize(human_Ne);
}

s4 2 {
    cat("\nGeneration: " + sim.generation);
    cat(" (" + 25 * (burnin + human_split - sim.generation) + " kya)\n");
    cat("\t-saving population dump\n");
    sim.outputFull(output_pop);
}

s5 2 {
    cat("\nGeneration: " + sim.generation);
    cat(" (" + 25 * (burnin + human_split - sim.generation) + " kya)\n");
    cat("- simulating introgression\n");
    cat("\tNeanderthal admixture into modern humans: " + neand_modern + "\n");
    cat("\tmodern human admixture into Neanderthals: " + modern_neand + "\n");

    p2.setMigrationRates(p1, modern_neand);
    p1.setMigrationRates(p2, neand_modern);
}

s6 2 {
    cat("\nGeneration: " + sim.generation);
    cat(" (" + 25 * (burnin + human_split - sim.generation) + " kya)\n");
    cat("- end of introgression\n");

    p1.setMigrationRates(p2, 0);
    p2.setMigrationRates(p1, 0);
}

s7 2 {
    post_admixture = sim.generation - (burnin + human_split - introgression);

    if (post_admixture == 0) writeFile(output_traj, "gen\tmodern\tneand");

    neand_ancestry = ancestry_prop(p1, m0);
    modern_ancestry = 1 - ancestry_prop(p2, m0);

    writeFile(
        output_traj,
        paste(c(post_admixture, neand_ancestry, modern_ancestry), sep = "\t"),
        append = T
    );

    //if (sim.generation - (burnin + human_split) == 0) {
    if (post_admixture == sampling_length) {
        cat("\nGeneration: " + sim.generation);
        cat(" (" + 25 * (burnin + human_split - sim.generation) + " kya)\n");
        cat("- simulation finished\n");
        sim.simulationFinished();
    }
}