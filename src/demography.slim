initialize() {
    defineConstant("mut_rate", 0);
    defineConstant("recomb_rate", 0);
    defineConstant("gene_length", 100000);
    defineConstant("gene_count", 2);
    defineConstant("chrom_length", 6000000);

    defineConstant("ancestral_Ne", 1000);
    defineConstant("human_Ne", 10000);
    defineConstant("archaic_Ne", 1000);

    defineConstant("source", "p2");
    defineConstant("admix_time", 155000);
    defineConstant("admix_rate", 0.5);

    defineConstant("chrom_type", "Y");

    if (chrom_type == "A")
        marker_count = asInteger(chrom_length / 10000);
    else
        marker_count = 1;

    defineConstant("marker_pos", asInteger(seq(0, chrom_length - 1, length = marker_count)));

    initializeMutationRate(mut_rate);
    initializeRecombinationRate(recomb_rate);

    // deleterious mutation type
    initializeMutationType("m0", 0.5, "f", 0.0);

    // modern human neutral marker
    initializeMutationType("m1", 0.5, "f", 0.0);

    // archaic neutral marker
    initializeMutationType("m2", 0.5, "f", 0.0);

    // genomic element type of genic regions
    initializeGenomicElementType("g1", m1, 1.0);

    initializeSex(chrom_type);

    // uniform chromosome with uniformly distributed genic regions
    if (gene_count == 1) {
        starts = 0;
        ends = chrom_length - 1;
    } else {
        step = round((chrom_length - (gene_length * gene_count)) / (gene_count - 1));
        starts = asInteger(seq(0, chrom_length - gene_length, by = step + gene_length));
        ends = starts + gene_length - 1;
    }
    for (i in 1 : gene_count)
        initializeGenomicElement(g1, starts[i - 1], ends[i - 1]);
}

// create a population of human-archaic ancestors
1 {
    sim.addSubpop("p1", ancestral_Ne);

    defineConstant("burnin", 10 * ancestral_Ne);
    defineConstant("human_split", asInteger(575000 / 25));
    defineConstant("nonafr_split", asInteger(70000 / 25));
    defineConstant("introgression", asInteger(admix_time / 25)); // time of admixture
    defineConstant("bottleneck", asInteger(1000 / 25)); // duration of the bottleneck

    sim.rescheduleScriptBlock(s1, generations = burnin);
    sim.rescheduleScriptBlock(s2, generations = burnin + human_split - nonafr_split);
    sim.rescheduleScriptBlock(s3, generations = burnin + human_split - nonafr_split + bottleneck);
    sim.rescheduleScriptBlock(s4, generations = burnin + human_split - introgression);
    sim.rescheduleScriptBlock(s5, generations = burnin + human_split - introgression + 1);
    sim.rescheduleScriptBlock(s6, generations = burnin + human_split); 
}

// end of the burn-in period - split of archaics from other humans
s1 2 late() {
    cat("Generation: " + sim.generation);
    cat(" (" + 25 * (burnin + human_split - sim.generation) + " kya)\n");
    cat("- split of archaics from modern humans\n");

    sim.addSubpop("p2", archaic_Ne);

    // place ancestry informative markers
    if (source == "p1") {
        cat("- placing neutral markers on the modern human lineage\n");
        p1.genomes[!p1.genomes.isNullGenome].addNewDrawnMutation(m1, marker_pos);
    } else {
        cat("- placing neutral markers on the archaic lineage\n");
        p2.genomes[!p2.genomes.isNullGenome].addNewDrawnMutation(m2, marker_pos);
    }
}

// split of non-Africans from Africans
s2 2 {
    cat("\nGeneration: " + sim.generation);
    cat(" (" + 25 * (burnin + human_split - sim.generation) + " kya)\n");
    cat("- non-African bottleneck\n");

    p1.setSubpopulationSize(2000);
}

s3 2 {
    cat("\nGeneration: " + sim.generation);
    cat(" (" + 25 * (burnin + human_split - sim.generation) + " kya)\n");
    cat("- end of the non-African bottleneck\n");

    p1.setSubpopulationSize(human_Ne);
}

s4 2 {
    cat("\nGeneration: " + sim.generation);
    cat(" (" + 25 * (burnin + human_split - sim.generation) + " kya)\n");

    //
    if (source == "p1") {
        cat("- modern human -> archaic introgression\n");
        p2.setMigrationRates(p1, admix_rate);
    } else {
        cat("- archaic -> modern human introgression\n");
        p1.setMigrationRates(p2, admix_rate);
    }
}

s5 2 {
    cat("\nGeneration: " + sim.generation);
    cat(" (" + 25 * (burnin + human_split - sim.generation) + " kya)\n");
    cat("- end of introgression\n");

    p1.setMigrationRates(p2, 0);
    p2.setMigrationRates(p1, 0);
}

s6 2 {
    cat("\nGeneration: " + sim.generation);
    cat(" (" + 25 * (burnin + human_split - sim.generation) + " kya)\n");
    cat("- simulation finished\n\n");

    cat("Archaic ancestry in modern humans: " + ancestry_prop(p1, m2) + "\n");
    cat("Modern human ancestry in archaics: " + ancestry_prop(p2, m1) + "\n");
    sim.simulationFinished();
}

function (float)ancestry_prop(lifso<Subpopulation> pop, lifso<MutationType> type) {
    if (chrom_type == "A")
        ploidy = 2;
    else
        ploidy = 1;

    return(sum(pop.individuals.countOfMutationsOfType(type)) / pop.individualCount / length(marker_pos) / 2);
 }
